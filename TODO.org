* Raytracer Enhancements

This document describes a bunch of enhancements that can be taken up
as part of evolving the ray-tracer. These vary in difficulty level,
and are generally not described in that order.

** Documentation

   + +List of programs and images (320x256) that they generate so that
     we know whats going on.+

** Raytracer Enhancements

   + Ray Debug Tracing

     The general idea is to choose a point on the canvas, and let the
     ray-tracer dump all steps that happen to color that pixel.

     Should allow for easy debugging of the ray-tracer, when it will
     /inevitably/ be needed.

   + Estimate Time To Render

     For larger scenes, it might be a good idea to provide a
     running-estimate of number of seconds / milliseconds it might
     take to finish the render.

     If a time-left-to-render is hard, a percentage of scene completed
     etc. would be just as useful.

   + +Shape Without Shadows+

     +For some shapes / scenarios it might be worthwhile for the shape+
     +to not cast any shadow i.e. instances of shapes should be able to+
     +opt out of casting a shadow+.

     +This is useful, f.e. when looking through the surface of a pond+
     +at some rocks beneath. If the pond surface actually cast a+
     +shadow, it would mess the scene up, completely. Adding light+
     +sources beneath the surface is also not a good idea, because that+
     +would cast weird shadows etc.+

   + Anti-Aliasing

     Because pixels have a finite size, diagonal lines under
     sufficient magnification will appear jagged (or stair-step).

     One approach to fix this problem is called
     /super-sampling/. Instead of casting a single ray per pixel, we
     cast multiple rays. Each ray passes through a different (random)
     point offset from the center of the pixel. The resulting color is
     then averaged to compute the color of the pixel.

     Ofcourse, more rays means more computation, and significant
     increase in rendering times as well.

     Instead of a brute-force approach of *always* casting a /fixed/
     number of rays per pixel, the same effect can be obtained by
     casting variable number of rays. For example, we can start by
     casting 5 rays as follows:

     + 4 at each of the corners of the pixel and \\
     + 1 at the center of the pixel

     If any of the corner-colors differ from the center-color by some
     threshold then sub-divide that quarter of pixel, and repeat the
     procedure recursively (for some sensible recursion
     depth). Depending on the scene, this has the /potential/ to offer
     significant savings (as compared to the simplistic brute-force
     approach as outlined above)

   + Camera Aperture

     Our camera is an ideal pin-hole camera which casts 1 ray per
     pixel. This needs to change.

   + More Primitive Shapes

     Enhance the ray-tracer to support more primitive shapes. This can
     include, for example, support for

     - +cube+ (DONE)
     - +cylinder+ (DONE)
     - +cone+ (DONE)
     - +object grouping i.e manipulate objects as a group+ (DONE)
     - +triangle+ (DONE)
     - torus
     - ...

   + Scene Description Via Configuration

     Every scene is hardcoded with respect to placement of the camera,
     the light sources, the objects that make up the world
     etc. etc.

     Ideally these parameters should be loaded via a YAML
     configuration, making the whole thing more programmatic.

   + +OBJ File Support+

     +Add support for loading scenes by parsing Wavefront's OBJ file+
     +format.+

   + Acceleration Structures

     Add support for axis-aligned-bounding-boxes for faster rendering
     of scenes.

   + +Use LLVM+

     +Build the whole thing using clang, fixing issues as they come+
     +up. Hopefully not too many :)+

   + Improvements To Perlin Noise

     Currently, perlin noise generates noisy textures based on either
     a generic pattern interface instance or a color (which is also a
     pattern instance i.e. solid pattern).

     It would be nice to have a list of interpolators (which are just
     functions) f.e. quadratic, bezier etc. which can be applied to
     the generated noise value.

   + Performance Hacks

     Ideas from [[https://forum.raytracerchallenge.com/thread/203/performance-tips-clarifications-book-errata][here]].

   + Test Layout Improvement

     We do have unit-tests that cover almost all aspects of
     primitives, routines etc. that have been developed. These are
     organized into a separate directory at the top-level, like so:

     #+begin_src shell

     +--- src
          +     CMakeLists.txt
          |
          + --- primitives
          |        CMakeLists.txt
          |        file_{1,2,...}.{cpp,hpp}
          |
          + --- shapes
          |        CMakeLists.txt
          |        file_{1,2,...}.{cpp,hpp}
          |
          + --- patterns
          |        CMakeLists.txt
          |        file_{1,2,...}.{cpp,hpp}
          |
          + --- io
          |        CMakeLists.txt
          |        file_{1,2,...}.{cpp,hpp}
          |
     +--- tests
             CMakeLists.txt
             file_{1,2,...}.{cpp,hpp}


     #+end_src

     However, it seems that it would be better to lay out the
     unit-tests close to the code / library that they are
     testing. This would imply a directory structure like so:

     #+begin_src shell

     +--- src
          + --- primitives
          |     .  CMakeLists.txt
          |     .  file_{1,2,...}.{cpp,hpp}
          |     |
          |     + --- tests
          |           CMakeLists.txt
          |
          + --- shapes
          |     .  CMakeLists.txt
          |     .  file_{1,2,...}.{cpp,hpp}
          |     |
          |     + --- tests
          |           CMakeLists.txt
          |
          + --- patterns
          |     .  CMakeLists.txt
          |     .  file_{1,2,...}.{cpp,hpp}
          |     |
          |     + --- tests
          |           CMakeLists.txt
          |
          + --- io
          |     .  CMakeLists.txt
          |     .  file_{1,2,...}.{cpp,hpp}
          |     |
          |     + --- tests
          |           CMakeLists.txt
          |
     +--- integration-tests
             . CMakeLists.txt
             . file_{1,2,}.{cpp, hpp}

     #+end_src

     Moreover, we also want to automatically run these tests with
     every build.

